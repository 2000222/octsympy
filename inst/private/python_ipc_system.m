function A = python_ipc_system(what, cmd, varargin)

  persistent show_msg

  if (strcmp(what, 'reset'))
    show_msg = [];
    A = true;
    return
  end

  if ~(strcmp(what, 'run'))
    error('unsupported command')
  end

  if (isempty(show_msg))
    disp('##')
    disp('##  Initializing SymPy communication...')
    disp('##')
    disp('##  You are using the system() IPC mechanism to communicate with SymPy.')
    disp('##  This will be slow.  Every round-trip involves executing a new Python')
    disp('##  process.  Many operations involve several round-trips.')
    disp('##')
    show_msg = true;
  end

  tag = ipc_misc_params();

  headers = python_header();


  %% load all the inputs into python as pickles
  s1 = python_copy_vars_to('_ins', varargin{:});

  %% the actual command
  % this will do something with _ins and produce _outs
  s2 = sprintf('%s\n\n', cmd);

  %% output
  s3 = python_copy_vars_from('_outs');

  %% FIXME: Debug mode
  % it would be helpful to provide an option to output the
  % generated py file for examing.
  if (1==1)
    nl = sprintf('\n');
    bigs = [headers nl s1 nl s2 nl s3 nl];
    bigs = strrep(bigs, '"', '\"');
    [status,out] = system(['python -c "' bigs '"']);
  else
    %% use a temp file
    fname = 'temp_sym_python_cmd.py';
    fd = fopen(fname, 'w');
    fprintf(fd, '# temporary autogenerated code\n\n');
    fprintf(fd, '%s\n', headers);
    fprintf(fd, '%s\n', s1);
    fprintf(fd, '%s\n', s2);
    fprintf(fd, '%s\n', s3);
    fclose(fd);
    [status,out] = system(['python ' fname]);
  end

  if status ~= 0
    status
    out
    error('failed');
  end
  A = extractblock(out, tag.item, tag.enditem);
  % cut the "import variables success message"
  A = A(3:end);
