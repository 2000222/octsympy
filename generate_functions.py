#!/usr/bin/python

# Yo dawg, I heard you like code generation so I wrote a code
# generator to write your code generators!


L = """
sqrt exp log
abs|Abs|-1
sin sinh asin asinh
cos cosh acos acosh
tan tanh atan atanh|atanh|1/2
csc
sec
cot coth acot acoth|acoth|2
floor
ceil|ceiling|3/2
sign
"""
# sec, csc don't have hyperbolic or arc
#sech asec asech
#csch acsc acsch


# replace L with a list of dictionaries
LL = L.split();
L = [];
for it in LL:
    it = it.split('|')
    print it
    f = it[0]
    if (len(it) > 1):
        d = {'name':f,'sname':it[1],'testval':it[2]};
    else:
        d = {'name':f,'sname':f,'testval':'1'};
    L.append(d);


# autogenerate functions
for d in L:
    f = d['name'];
    fname = '@sym/%s.m' % f
    print fname

    fd = open(fname, "w")

    fd.write ("function z = %s(x)\n" % f)
    fd.write ("%");
    fd.write ("%s  Symbolic %s function\n" % (f.upper(),f))

    s = """%
%   Autogenerated, do not modify

  cmd = [ 'def fcn(ins):\\n'  ...
          '    (x,) = ins\\n'  ...
"""
    fd.write(s)
    fd.write("          '    y = sp.%s(x)\\n'  ...\n" % d['sname'])
    fd.write("          '    return (y,)\\n' ];\n")
    fd.write("\n");
    fd.write("z = python_sympy_cmd(cmd, x);\n\n")
    fd.close()


# Now make simple unit tests
for d in L:
    f = d['name'];
    fname = 'unittests/test_%s.m' % f
    print fname
    fd = open(fname, "w")
    fd.write ("function r = test_%s()\n" % f)
    fd.write ("%");
    fd.write ("TEST_%s  autogenerated test for symbolic %s\n" % (f.upper(),f))

    fd.write("  x = sym('%s');\n" % d['testval'])
    fd.write("  f1 = %s(x);\n" % f)
    fd.write("  f2 = %s(%s);\n" % (f, d['testval']))
    fd.write("  r = abs(double(f1) - f2) < 1e-15;\n\n")
    fd.close()

# Output list for .gitignore file
print "**** Optional: copy/paste to update this list in .gitignore ****"

for d in L:
    f = d['name']
    print "@sym/%s.m" % f

for d in L:
    f = d['name']
    print "unittests/test_%s.m" % f
