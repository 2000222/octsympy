#!/usr/bin/python
"""generate_functions.py

Yo dawg, I heard you like code generation so I wrote a code
generator to write your code generators!
"""

import sys
import os

input_list = """sqrt
exp
log
abs|Abs|-1
floor
ceil|ceiling|3/2
sin
sinh
asin
asinh
cos
cosh
acos
acosh
tan
tanh
atan
atanh||1/2
csc
sec
cot
coth
acot
acoth||2
sign
factorial
gamma
erf
erfc
erfinv||1/2
erfcinv|||%   Note: the erfcinv unit test fails on Octave < 3.8
erfi||0,0|
heaviside|Heaviside|1,1
dirac|DiracDelta|1,0
nextprime||123,127
"""
# todo:
#psi(x)|polygamma(0,x)
#psi(k,x)|polygamma(k,x)

# sec, csc don't have hyperbolic or arc
#sech asec asech
#csch acsc acsch




def process_input_list(L):
    """replace L with a list of dictionaries"""
    LL = L.splitlines();
    L = [];
    for it in LL:
        it = it.split('|')
        #print it
        f = it[0]
        d = {'name':f}
        if len(it) >= 2 and it[1] != '':
            d['spname'] = it[1]
        else:
            d['spname'] = f
        if len(it) >= 3 and it[2] != '':
            testvals = it[2].split(',')
            if len(testvals) == 2:
                (d['test_in_val'],d['test_out_val']) = testvals
                d['out_val_from_oct'] = False
            else:
                (d['test_in_val'],) = testvals
                d['out_val_from_oct'] = True
                d['octname'] = f
        else:
            d['test_in_val'] = '1'
            d['out_val_from_oct'] = True
            d['octname'] = f
        if (len(it) >= 4):
            d['extra_code'] = it[3]
        else:
            d['extra_code'] = ''
        L.append(d);
    return L



def remove_all(L):
    """FIXME: all a bit hacky, should do better"""
    for d in L:
        f = d['name'];
        fname = '../inst/@sym/%s.m' % f
        try:
            os.unlink(fname)
        except:
            True



def autogen_functions(L, where):
    for d in L:
        f = d['name'];
        fname = '%s/@sym/%s.m' % (where,f)
        print fname

        fd = open(fname, "w")

        fd.write("function z = %s(x)\n" % f)
        fd.write("%")
        fd.write("%s  Symbolic %s function\n" % (f.upper(),f))

        s = """%
%   Autogenerated, if you want to edit, make changes to
%   'generate_functions.py' instead.
%
"""
        fd.write(s)
        fd.write("%s\n\n" % d['extra_code'])
        fd.write("  cmd = [ '(x,) = _ins\\n'   ...\n" )
        fd.write("          'if x.is_Matrix:\\n'   ...\n" )
        fd.write("          '    z = x.applyfunc(lambda a: sp.%s(a))\\n'  ...\n" % d['spname'])
        fd.write("          'else:\\n'   ...\n" )
        fd.write("          '    z = sp.%s(x)\\n'  ...\n" % d['spname'])
        fd.write("          'return (z,)' ];\n")
        fd.write("\n");
        fd.write("  z = python_cmd (cmd, x);\n\n")
        fd.write("end\n")

        # tests
        fd.write("\n\n%!shared d,x\n")
        fd.write("%%! d = %s;\n" % d['test_in_val'])
        fd.write("%%! x = sym('%s');\n" % d['test_in_val'])
        fd.write("%!test\n")
        fd.write("%%! f1 = %s(x);\n" % f)
        if d['out_val_from_oct']:
            fd.write("%%! f2 = %s(d);\n" % f)
        else:
            fd.write("%%! f2 = %s;\n" % d['test_out_val'])
        fd.write("%! assert( abs(double(f1) - f2) < 1e-15 )\n")

        fd.write("%!test\n")
        fd.write("%! D = [d d; d d];\n")
        fd.write("%! A = [x x; x x];\n")
        fd.write("%%! f1 = %s(A);\n" % f)
        if d['out_val_from_oct']:
            fd.write("%%! f2 = %s(D);\n" % f)
        else:
            fd.write("%%! f2 = %s;\n" % d['test_out_val'])
            fd.write("%! f2 = [f2 f2; f2 f2];\n")
        fd.write("%! assert( all(all( abs(double(f1) - f2) < 1e-15 )))\n")

        fd.close()


def output_for_gitignore(L):
    """Output list for .gitignore file"""
    print "**** Optional: copy/paste to update this list in .gitignore ****"

    for d in L:
        f = d['name']
        print "inst/@sym/%s.m" % f


def print_usage():
    print """
  Run this script with one argument:
    python generate_functions install:  make m files in ../inst/@sym
    python generate_functions clean:  remove them from above
    python generate_functions gitignore:  generate lines for gitignore (for devs)
"""

if __name__ == "__main__":
    L = process_input_list(input_list)
    print sys.argv
    if len(sys.argv) <= 1:
        print_usage()

    elif sys.argv[1] == 'install':
        print "***** Generating code for .m files from template ****"
        autogen_functions(L, '../inst')
    elif sys.argv[1] == 'clean':
        print "cleaning up"
        remove_all(L)
    elif sys.argv[1] == 'gitignore':
        output_for_gitignore(L)
    else:
        print_usage()


