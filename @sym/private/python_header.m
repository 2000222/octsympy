function s = python_header()

  %s = sprintf('import sympy as sp\nimport pickle\n\n');

  s = sprintf([ ...
  'import sys\n' ...
  'sys.ps1 = ""; sys.ps2 = ""\n' ...
  'import sympy as sp\n' ...
  'from sympy import *\n' ...
  '#import dill as pickle\n' ...
  '\n' ...
  '\n' ...
  'def dbout(l):\n' ...
  '    sys.stderr.write("pydebug: " + str(l) + "\\n")\n' ...
  '\n' ...
  '\n' ...
  'def objectfilter(x):\n'   ...
  '    """Perform final fixes before passing objects back to Octave"""\n'   ...
  '    if isinstance(x, sp.Matrix) and x.shape == (1,1):\n'   ...
  '        #dbout("Note: replaced 1x1 mat with scalar")\n'   ...
  '        y = x[0,0]\n'   ...
  '    else:\n'   ...
  '        y = x\n'   ...
  '    return y\n'   ...
  '\n' ...
  '\n' ...
  'def octcmd(x):\n'   ...
  '    x = objectfilter(x)\n'   ...
  '    if isinstance(x, sp.Expr):\n'   ...
  '        # works on Octave where " is valid for enclosing strings\n' ...
  '        #s = "sym(\\"" + str(x) + "\\", \\"" + sp.srepr(x) + "\\")"\n'   ...
  '        s = "sym(''" + str(x) + "'', ''" + sp.srepr(x).replace("''", "''''") + "'')"\n'   ...
  '        # possibly str(x).encode("string_escape")\n'   ...
  '    elif isinstance(x, sp.Matrix):\n'   ...
  '        s = "sym(sprintf(''" + sp.pretty(x,use_unicode=False).encode("string_escape") + "''), ''" + sp.srepr(x).replace("''", "''''") + "'')"\n'   ...
  '        #s = "sym(sprintf(''" + sp.pretty(x,use_unicode=True).encode("utf-8").replace("\\n","\\\\n") + "''), ''" + sp.srepr(x).replace("''", "''''") + "'')"\n'   ...
  '    elif isinstance(x, bool) and x:\n'   ...
  '        s = "true"\n'   ...
  '    elif isinstance(x, bool) and not x:\n'   ...
  '        s = "false"\n'   ...
  '    elif isinstance(x, (list,tuple)):\n'   ...
  '        s = "{"\n'   ...
  '        for y in x:\n'   ...
  '            s = s + octcmd(y) + ",  "\n'   ...
  '        s = s + "}"\n'   ...
  '    elif isinstance(x, int):\n'   ...
  '        s = str(x)\n'   ...
  '    elif isinstance(x, float):\n'   ...
  '        s = str(x)\n'   ...
  '        # FIXME\n'   ...
  '    elif isinstance(x, str):\n'   ...
  '        s = "sprintf(''" + x.encode("string_escape") + "'')"\n'   ...
  '    elif isinstance(x, unicode):\n'   ...
  '        # not .encode("string_escape")\n' ...
  '        s = "sprintf(''" + x.encode("utf-8").replace("\\n","\\\\n") + "'')"\n'   ...
  '    else:\n'   ...
  '        s = "error(''python does not know how to export that'')"\n'   ...
  '    return s\n'   ...
  '\n']);
