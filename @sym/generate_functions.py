#!/usr/bin/python

# Yo dawg, I heard you like code generation so I wrote a code
# generator to write your code generators!

# TODO: make a template which we process would be nicer than this

L = 'sqrt sin cos tan asin acos atan sinh cosh tanh'

L = L.split();

for f in L:
    fname = '%s.m' % f;
    print fname

    fd = open(fname, "w")
    #f.write( str(Vertices.shape[0]) + " " + str(Faces.shape[0]) + "\n" )
    #outputPlyData(Vertices, Faces, f)

    fd.write ("function z = %s(a)\n" % f)
    fd.write ("%");
    fd.write ("%s  Symbolic %s function\n" % (f,f))

    s = """%
%   Autogenerated, do not modify

  fd = fopen('sym_python_temp.py', 'w');
  fprintf(fd, 'import sympy as sp\\n');
  fprintf(fd, 'import pickle\\n');
  fprintf(fd, 'a = pickle.loads(\"\"\"%s\"\"\")\\n', a.pickle);
"""
    fd.write(s)
    fd.write( "  fprintf(fd, 'z = sp.%s(a)\\n');" % f )

    s = """
  fprintf(fd, 'print "__________"\\n');
  fprintf(fd, 'print str(z)\\n');
  fprintf(fd, 'print "__________"\\n');
  fprintf(fd, 'print pickle.dumps(z)\\n');
  fclose(fd);
  [status,out] = system('python sym_python_temp.py');
  if status ~= 0
    error('failed');
    out
  end
  A = regexp(out, '__________\\n(.*)\\n__________\\n(.*)', 'tokens');
  s.text = A{1}{1};
  s.pickle = A{1}{2};
  z = class(s, 'sym');
"""
    fd.write(s)
    fd.close()


# TODO: a nice feature would be generate some units tests or something!
# perhaps call them all and then call with double and check the results are close
